package main

import (
	"fmt"
	"net/http"
	"strconv"
	"time"
)

var timers = make(map[string]*time.Timer)

func main() {
	http.HandleFunc("/start", handleStartTimer)
	http.HandleFunc("/cancel", handleCancelTimer)

	fmt.Println("Server listening on port 8080...")
	http.ListenAndServe(":8080", nil)
}

func handleStartTimer(w http.ResponseWriter, r *http.Request) {
	name := r.FormValue("name")

	if name == "" {
		http.Error(w, "Invalid name", http.StatusBadRequest)
		return
	}

	go startTimer(name)
	fmt.Fprintf(w, "Timer '%s' started.\n", name)
}

func handleCancelTimer(w http.ResponseWriter, r *http.Request) {
	name := r.FormValue("name")

	if name == "" {
		http.Error(w, "Invalid name", http.StatusBadRequest)
		return
	}

	cancelTimer(name)
	fmt.Fprintf(w, "Timer '%s' canceled.\n", name)
}

func startTimer(name string) {
	timer := time.NewTimer(30 * time.Second)

	select {
	case <-timer.C:
		fmt.Printf("Timer '%s' completed.\n", name)
	case <-time.After(time.Millisecond):
		timers[name] = timer
	}
}

func cancelTimer(name string) {
	timer, exists := timers[name]
	if exists {
		if !timer.Stop() {
			<-timer.C
		}
		delete(timers, name)
		fmt.Printf("Timer '%s' canceled.\n", name)
	} else {
		fmt.Printf("Timer '%s' does not exist.\n", name)
	}
}

ANOTHER WAY

package main

import (
	"fmt"
	"net/http"
	"strconv"
	"time"
)

var timers = make(map[string]*time.Timer)

func main() {
	http.HandleFunc("/start", handleStartTimer)
	http.HandleFunc("/cancel", handleCancelTimer)

	fmt.Println("Server listening on port 8080...")
	http.ListenAndServe(":8080", nil)
}

func handleStartTimer(w http.ResponseWriter, r *http.Request) {
	name := r.FormValue("name")

	if name == "" {
		http.Error(w, "Invalid name", http.StatusBadRequest)
		return
	}

	go startTimer(name)
	fmt.Fprintf(w, "Timer '%s' started.\n", name)
}

func handleCancelTimer(w http.ResponseWriter, r *http.Request) {
	name := r.FormValue("name")

	if name == "" {
		http.Error(w, "Invalid name", http.StatusBadRequest)
		return
	}

	cancelTimer(name)
	fmt.Fprintf(w, "Timer '%s' canceled.\n", name)
}

func startTimer(name string) {
	timer := time.NewTimer(30 * time.Second)

	select {
	case <-timer.C:
		fmt.Printf("Timer '%s' completed.\n", name)
	case <-time.After(time.Millisecond):
		timers[name] = timer
	}
}

func cancelTimer(name string) {
	timer, exists := timers[name]
	if exists {
		if !timer.Stop() {
			<-timer.C
		}
		delete(timers, name)
		fmt.Printf("Timer '%s' canceled.\n", name)
	} else {
		fmt.Printf("Timer '%s' does not exist.\n", name)
	}
}
